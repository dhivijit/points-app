<!DOCTYPE html>
<html>

<head>
    <title>Assign Points</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.8/dist/css/bootstrap.min.css" rel="stylesheet"
        integrity="sha384-sRIl4kxILFvY47J16cr9ZwB07vP4J8+LH7qKQnuqkuIAvNWLzeN8tE5YBujZqJLB" crossorigin="anonymous">
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.8/dist/js/bootstrap.bundle.min.js"
        integrity="sha384-FKyoEForCGlyvwx9Hj09JcYn3nv7wiPVlz7YYwJrWVcXK/BmnVDxM+D2scQbITxI"
        crossorigin="anonymous"></script>
    <style>
        /* suggestion box styles */
        .suggestions {
            position: absolute;
            z-index: 2000;
            width: 100%;
            max-height: 220px;
            overflow-y: auto;
            box-shadow: 0 4px 12px rgba(0,0,0,0.15);
        }
        .suggestions .list-group-item.active,
        .suggestions .list-group-item:focus {
            background-color: #0d6efd;
            color: white;
            outline: none;
        }
    </style>
    <script>
        document.addEventListener('DOMContentLoaded', () => {
            // read members list populated in data-members attr
            const wrapper = document.getElementById('memberSearchWrapper');
            const membersList = wrapper && wrapper.getAttribute('data-members') ? JSON.parse(wrapper.getAttribute('data-members')) : [];
            
            const input = document.getElementById('memberSearch');
            const suggestions = document.getElementById('memberSuggestions');
            const select = document.getElementById('memberSelect');
            const hiddenInput = document.getElementById('memberNameInput');
            let index = -1; // current selected suggestion index

            function showSuggestions(matches) {
                suggestions.innerHTML = '';
                if (!matches.length) { suggestions.style.display = 'none'; return; }
                matches.forEach((name, i) => {
                    const item = document.createElement('button');
                    item.type = 'button';
                    item.className = 'list-group-item list-group-item-action';
                    item.textContent = name;
                    item.setAttribute('data-index', i);
                    item.addEventListener('click', () => pick(name));
                    item.addEventListener('keydown', (e) => {
                        if (e.key === 'Enter') { e.preventDefault(); pick(name); }
                    });
                    suggestions.appendChild(item);
                });
                suggestions.style.display = 'block';
            }

            function pick(name) {
                input.value = name;
                hiddenInput.value = name; // âœ… update hidden input
                // set select to the picked name if present
                const opt = Array.from(select.options).find(o => o.value === name);
                if (opt) select.value = name;
                suggestions.style.display = 'none';
                index = -1;
                input.focus();
            }

            function update() {
                const q = input.value.trim().toLowerCase();
                if (!q) { suggestions.style.display = 'none'; return; }
                const matches = membersList.filter(n => n.toLowerCase().includes(q)).slice(0, 10);
                showSuggestions(matches);
            }

            input.addEventListener('input', () => { 
                update(); 
                hiddenInput.value = input.value.trim(); // keep in sync while typing
            });

            input.addEventListener('keydown', (e) => {
                const items = suggestions.querySelectorAll('.list-group-item');
                if (e.key === 'ArrowDown') {
                    e.preventDefault();
                    index = Math.min(index + 1, items.length - 1);
                    if (items[index]) items[index].focus();
                } else if (e.key === 'ArrowUp') {
                    e.preventDefault();
                    index = Math.max(index - 1, 0);
                    if (items[index]) items[index].focus();
                } else if (e.key === 'Enter') {
                    // if suggestions visible and an item is focused, pick it
                    const active = document.activeElement;
                    if (active && active.parentElement === suggestions) {
                        e.preventDefault();
                        active.click();
                    }
                } else if (e.key === 'Escape') {
                    suggestions.style.display = 'none';
                    index = -1;
                }
            });

            // click outside to close
            document.addEventListener('click', (e) => {
                if (!e.target.closest('#memberSearchWrapper')) {
                    suggestions.style.display = 'none';
                }
            });

            // update hidden input on blur
            input.addEventListener('blur', () => {
                hiddenInput.value = input.value.trim();
            });
        });
    </script>
</head>

<body class="container mt-5">
    <div class="d-flex justify-content-between align-items-center">
        <h1>Assign Points</h1>
        <div>
            <% if (authenticated) { %>
                <a href="/leaderboard" class="btn btn-primary">Leaderboard</a>
                <form method="post" action="/logout" style="display:inline-block">
                    <button class="btn btn-danger">Logout</button>
                </form>
            <% } else { %>
                <a href="/" class="btn btn-primary">Login</a>
            <% } %>
        </div>
    </div>

    <form method="post" action="/assign">
        <div class="mb-3" id="memberSearchWrapper" style="position:relative" data-members='<%= JSON.stringify(members.map(m => m.name)) %>'>
            <label class="form-label">Search Member</label>
            <input type="text" class="form-control" id="memberSearch" autocomplete="off" placeholder="Type to search members...">
            <div id="memberSuggestions" class="list-group suggestions" style="display:none"></div>
        </div>
        <!-- hidden input will carry the memberName to the server -->
        <input type="hidden" name="memberName" id="memberNameInput" value="">
        <!-- keep the select in DOM but visually hidden for accessibility/fallback -->
        <div class="mb-3" style="display:none">
            <label class="form-label">Select Member (hidden)</label>
            <select id="memberSelect" class="form-select">
                <% members.forEach(m=> { %>
                    <option value="<%= m.name %>"><%= m.name %></option>
                <% }) %>
            </select>
        </div>
        <div class="mb-3">
            <label class="form-label">Round</label>
            <select name="round" class="form-select">
                <option value="1">Round 1</option>
                <option value="2">Round 2</option>
                <option value="3">Round 3</option>
            </select>
        </div>
        <div class="mb-3">
            <label class="form-label">Points</label>
            <input type="number" name="points" class="form-control" required>
        </div>
        <button type="submit" class="btn btn-success">Submit</button>
    </form>
</body>

</html>
